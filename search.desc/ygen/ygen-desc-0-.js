searchState.loadedDescShard("ygen", 0, "Ygen - Yet another Code Generator\nShared code generation classes (mainly used for register …\nThe ir module: functions for building function ir\nWriting/Reading object files\nThe pass manager module:\nOther utilites like:\nThe target module: every stuff which has to do with …\nDebugging information\nMost common used functions, classes, enums of this Libary\nhelps with compilation\na number\na platform specifc instruction\nMachine specific settings, like the lowering function …\nA more machine specifc calling convention (Just a wrapper …\na low level instruction which is portable over platforms\nThe mnemonic to use\na low level operand which is portable over platforms\nA shared enum for registers\na register\nA register vector. Used for getting platform specific …\nAdds an operand\nreturns the architecture of the register\nreturns the args for the specifc architecture\ndumps the instruction into a assembly string\nencodes the instruction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the name of the mnemonic\nCreates a new register vector\nCreates new machine settings\nCreates a new machine instr\nreturns how many arguments are stored in registers\npops a specific register from the register of the arch\npushes a specific register back to the register of the arch\nreturns the return register for the specific architecture …\nreversees the registers of the arch\nSets the output of the instr\na register of the x64 platform\nA basic block: stores ir of a specific area of a function\nCreates an new block\nA constant\nCreates a new function type\nCreates a new Function\nA ir function with a known variable and arg size and count\nStores the function type\nIRBuilder: used for building the ir of a function\nCreates an new IRBuilder\nThe given argument type doesn’t overllap with the actual …\nThe Module\nCreates a new module\nThe type of op0 operand doesn’t match the type of the …\nThe type of the ret node doesn’t match the function …\nTo many arguments were supplyed\nStores a type and a value of that type\nStores type metadata (just the type without data)\nA variable\nCreates a new variable\nAn error which stores if an ir node is invalid\nNotype\nNotype\nActivates dynamic arguments Makes that you can supply any …\nAdds a new function to the module\nAdds a new block to the function\nAdds a new constant to the module\nAdds an already defined function to the module\nAdds an already defined const to the module\nAfter the given arguments any argument type can be …\nReturns the argument as a var If the num doesn’t exists, …\nThe function arguments (stored as: num, type)\nReturns the size of the type in bits\nReturns the size of the type in bytes\nEmits the ir of the entire moudle into one string Maybe …\nEmits the Ir of the function into a string\nEmits the ir of the block into one string\nEmits the ir of the entire module into a colored string …\nEmits the Ir of the function into an colored string\nEmits the ir of the block into one colored string\nemits all function into one asm file\nemits the machine code of the module into an object file …\nemits machine instrs for target note: machine instrs are …\nemits all function into one asm file\nSets that the function is externally visible (same as: …\nSets that the constant is externally visible\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nputs the intenger into a type respecting the type metadata\ngets the data of the constant\nReturns the last block of the builder\nJust an i16 with a value\ni16\nJust an i32 with a value\ni32\nJust an i64 with a value\ni64\nSets that the function is imported from another object …\nSets that the constant is imported from another object file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores all ir nodes and the ir trait\nCreates an new ir builder\nCreates a new module\nCreates a new function type\nCreates a new Function\nCreates a new block\nCreats a new variable\ncreates a new constant\nparses the input string into a module\nreturns the parsed typemetadata\nThis module contains the logic required for parsing …\nPositions the block at the end of the blocks list\nPositions the block at the start of the blocks list\nSets that the function is only internally visible (same as …\nSets that the constant is only internally visible\n64Bit pointer\nptr\nRequests an new variable name - which is the current var …\nThe return type\nRuns the pass manager over all functions\nRuns the pass manager over all blocks\nsets the data of the constant\nReturns if it is a signed type\nsame as Display::fmt but with colors\nThe function type\nJust an u16 with a value\nu16\nJust an u32 with a value\nu32\nJust an u64 with a value\nu64\nReturns the inner value\nChecks if every function is correct:\nVerifys if the function and all of its blocks are correct:\nVerifys if the block and all of its ir nodes are correct:\nAn Ir node\nAn Ir node\nAn Ir node\nAn Ir node\nAn Ir node\nUsed for overloading the build function\nXors values\nUsed for overloading the build function\nXors values\nTrait used for overloading the BuildAssign function\nbuilds an assignment\nThis trait is used for building br nodes\nBuilds a br node\nBuilds a br condition node\nThis trait is used for building br condition nodes\nTrait for the call instruction Used for overloading the …\nbuilds a function call\nTrait for the cast instruction Used for overloading the …\nbuilds an cast to form one variable into another type\nThe trait <code>BuildCmp</code> is used to build the cmp node\nbuilds the compare node\nUsed for overloading the build function\nXors values\nUsed for overloading the build function\nXors values\nUsed for overloading the build function\nXors values\nReturns specified value\nTrait for the return instruction Used for overloading the …\nUsed for overloading the build function\nXors values\nUsed for overloading the build function\nXors values\nAn Ir node\nAn Ir node\nThe cmp node is used to compare values\nThe “compare mode” (e.g: ls is equal to rs)\nAn Ir node\nls == rs\nls &gt; rs\nls &gt;= rs\nls &lt; rs\nls &lt;= rs\nAn Ir node\nls != rs\nAn Ir node\nUsed for sus workaround to replace current ir node\nAn Ir node\nAn Ir node\nAn Ir node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nfirst inner value\nsecond inner value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nReplaces current ir node\nAn error of another type\nValue defined twice\nExpected token\nan extern function has an body\nthe given return type is different than the expected one …\nAn error which can occure during one of the ygen-ir …\nthe lexer ran out of characters\nthe parser ran out of tokens\nthe name says it\nexpected an end to the sequence, but found no end\nUnexpected character\nUnexpected token\nunkown thing\nunkown instruction\nA unkown type\nfound the wrong argument\nReturns the argument unchanged.\nYgen-Ir ir emittment\nCalls <code>U::from(self)</code>.\nYgen-Ir lexing\nYgen-Ir parsing\nYgen-Ir semnatic checks\nThe refering character\nThe box of the error\nexpected either one of these\nthe token which was expected\nthe expected return type\nthe expected argument\nexpected amount\nthe token which was found\nwhat was found\nthe found type\nthe found argument\nthe argument index\nThe character location\nThe character location\nThe location\nthe location\nthe location\nlocation\nlocation\nthe location\nwhere\nthe location\nthe name\nthe “thingy“s name\nthe name of the function\nwhats unkown (e.g: block)\nEmits the ygen ir statements (emitted by the parser) into …\nReturns the argument unchanged.\nlowers the incoming statemants into ygen ir\nCalls <code>U::from(self)</code>.\nemits the generated functions, constants, .. into a usable …\nCreates a new ir generator\nblock:\n,\ncond\nconst\ndeclare\ndefine\n:\n=\n@func_name\na-zA-Z.\n1234\nA lexer for lexing ygen ir strings\n{\n(\n[\nA location reference. Is recommended to be used for giving …\n}\n)\n]\n“abc”\nAn ir token\nThe token type for parsing ir\n…\n%name\nThe coloumn\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the sequence\n“lexes” the input\nThe line number\nThe entire source line\nthe location\nCreates a new ir lexer\nThe output\nthe type\na constant\na function\nParses ir tokens into ir statements with location data\nAn ir statement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an new ir parser\nThe output\nparses the input\nsemantic analaysiz for ir stmts\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an new ir semnatic analyzizer\nverifys the input\nA constant data\nA mutable data (E.g: a global variable)\nA decl to say what’s the label/func\nThe dll builder: used for creating shared libaries like …\nThe exe builder: used for creating executables like .exe, …\nFrom another object file\nCan be seen outside and inside of object file\nA function\nOnly aviable in the object file\nLinks from one symbol to another\nThe linkage of the target symbol\nBuilds object files. It also supports debugging information\nThe addend to use\nThe binary offset of the start of the function\ninclude debugging information\nAdds one decl to the function\nAdds one decl to the function\nAdds one decl to the function\nSets the decls of the function\nDefines a symbol\nDefines a symbol\nDefines a symbol\nWrites the object file into the the specified file\nWrites the symbols into the shared libary\nWrites the symbols into the excutable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe link source\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinks from one symbol to another\nCreates an new object builder\nCreates a new dll builder\nCreates a new exe builder\nIf it is a special relocation (only internal usage)\nThe link destination\nused for optimizing\nThe trait all Passes need to implement\nThe manager of all passes (PassManager)\nall passes\nAdds a new pass to the back of the pass queue\nAdds a new pass to the front of the pass queue\nAutomaticlly optimizes the input till it doesn’t change\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an new pass manager\noptimizes self\nReturns the pass\nExecutes the entire pass queue\nPass InlineConstValue \nCreates a new PreComputeValue pass which is heap allocated\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA command line parser\nA simple color\nThe color markup class\nColore encoder: Encodes a string by a specifed format E.g: …\nThe user color profile is used to store how ir elements …\nClorize trait: Colorizes a string\nAn Error: an Error struct can store Error informations\nA trait to pad strings\nPrints the error and exits the process If no error occured …\nThe Source Manager: easly chars out of a file\nThe token manager\nAdds a where arrow\nAdds an argument which is seperated by a <code>=</code>\nAdds an option\nReturns true if argument was seen\nReturns the value of the seen argument\nBlue color channel\nMakes the background of the string black\nMakes the background of the string blue\nMakes the string to a specified background color\nMakes the background of the string cyan\nMakes the background of the string gray\nMakes the background of the string green\nMakes the background of the string magenta\nMakes the background of the string red\nMakes the background of the string white\nMakes the background of the string yellow\nMakes the string black\nMakes the string blue\nMakes the string bold\nMakes the string to the specified color\nMakes the string cyan\nDeactivates location display\nEncodes a string by a specifed format E.g: Hi I am blueHi …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGreen color channel\nReturns the current position in the specified file\nReturns the current char in the specified file\nMakes the string gray\nMakes the string green\nPrints help\nSets the color of instr class\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes the string italitc\nMakes the string magenta\nMarkups the given string by the color class\nSets the color of name class\nCreates a new CLI parser\nCreates a new token manager\nCreates an new error\nCreats a new SrcMngr\nCreates new color settings which are defaulted to black\nReturns true if option was seen\nPads the string to a spicific len (if the input string is …\nPrints the error and exits the process If no error occured …\nPrints the error to stderr\nRed color channel\nMakes the string red\nRegisters a new file\nScans the arguments\nScans all tokens of an specific input file\nSets the code line\nSets the callback of the TokenMgr which is called for …\nMakes the string striketrough\nSets the color of ty class\nMakes the string underlined\nSets the color of value class\nSets the color of var class\nPrints the version and description\nMakes the string white\nMakes the string yellow\nAarch 64\nAarch64_be\nAix\nhow strong allowed the object is\nAmd\nAmd GCN\nAmdHSA\nAmdIL\nAmdIL64\nAmdPAL\nAnanas\nAndroid\nApple\nApple version of the aarch64 calling convention\narc\nTarget architecture\nArm\nArm eb\nAvr\nBgp\nBpfeb\nBpfel\nTarget calling convention\nCloudABI\nCnk\nCode16\nCoff\nAn wrapper trait for assembly compilers\nContiki\nCore CLR\nCsr\nCuda\nCygnus\nDarwin\nPlatforms default (e.g: Windows -&gt; Coff)\nDragonFly\nEABI\nEABIHF\nElf\nElfIAMCU\nTarget environment\nFreeBSD\nFreescale\nFuchsia\nGnu\nGnu ABI64\nGnu ABIN32\nGnu EABI\nGnu EABIHF\nGnu X32\nHaiku\nHermitCore\nHexagon\nHsail\nHsail64\nHurd\nIbm\nImagination Technologies\nIOS\nItanium\nkFreeBSD\nKalimba\nLanai\nLe32\nLe64\nThe lexer trait\nLinux\nLv2\nMacOS\nMachO\nMesa\nMesa3D\nMinix\nMips\nMips64\nMips64EL\nMips Technologies\nMipsel\nMsp420\nMsvc\nMusl\nMusl EABI\nMusl EABIHF\nMyriad\nNaCl\nNetBSD\nNvcl\nNvidia\nNvptx\nNvptx64\nTarget OS\nTarget object format\nOpenBSD\nOpen Embedded\nPC\nPower Pc\nPower PC 64\nPower PC 64 Little endian\nPs4\nR600\nStores errors which can occure in the <code>getBasedOnTriple</code> …\nRenderScript 32\nRenderScript 64\nRiscv32\nRiscv64\nRtems\nScei\nShave\nSimulator\nSolaris\nSparc\nSparcel\nSparc v9\nSpir\nSpir64\nSuse\nLinux standart\nSystemZ\nThe TargetBackendDescr is used to store all the …\nThe target registry: manages different targets\nTce\nTce le\nThumb\nThumb EB\nThe target triple\nTvOS\nUnknown Architecture\nUnknown Vendor\nUnknown OS\nUnknown environment\nUnknown\nAn unsupported architecture\nVendor\nWasi\nWasm\nWasm32\nWasm64\nThe webassembly calling convention\nWatchOS\nStores allowed instructions\nWin32\nWindows standart\nx86\nx86 64Bit\nXcoff\nXcore\nAdds an new target architecture\nAllowes a specifc mnemonic\nThe target architecture to use\nReturns the 16Bit intenger argument registers as a vec\nReturns the 32Bit intenger argument registers as a vec\nReturns the 16Bit intenger argument registers as a vec\nObject format\nReturns self into a boxed lexer trait\nBuilds the ir of the given triple into text assembly code\nBuilds the ir of the given triple into machine code\nemits machine instrs for target note: machine instrs are …\nbuilds all ir nodes of the current block into a vector of …\nChecks for forbidden mnemonics\nReturns the parsed instruction colored\nReturns the compiler to use with the TargetBackendDescr\nThe runtime environment\nForbids a specfic mnemonic\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nJust another name for the parse function\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the <code>TargetBackendDescr</code> for the arch (also it …\nreturns the calling convention used by the triple\nReturns the host target triple\nInitializes all targets\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the mnemonic is allowed\nlexes the string\nReturns the lexer to use with the TargetBackendDescr\nUsed for lowering machine instructions into dyn MCInstr\nCreates an new assembly compiler\nCreates a new instance\nCreates an new backend registry\nCreates a new instruction whitelist\nThe target calling convention to use\nReturns the output machine code\ncompiles an assembly string into machine code\nParses the target triple string. Returns the target triple …\nReturns the parsed instruction as a string\nReturns the number of register arguments in the calling …\nResets all values to “factory standart”\nused for system v call conv\nReturns the return register\nReturns the return register\nReturns the return register\nSets the calling convention to use for the specified …\nThe Vendor (If anyone knowns what this is please create an …\nThe x64 Target: used for compiling ir and inline asm into …\nThere is an unexpected comma\nAn empty memory displacment []\nThe first token is not an identifier\nAn invalid intenger\nAn error which can occure during lexing\nA not supported character\nAn error which can occure during parsing\nUnexpected token\nthese tokens are unexpected\nUnknown instruction\nThe identifier was unexpected or isn’t an valid register\nReturns if the reg is in the extendet region (r8-&gt;r15)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the x86-64 target\nx64 instruction encoding (compilation) and verifycation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the register (or better the subvariant) 16 bit wide?\nIs the register (or better the subvariant) 32 bit wide?\nIs the register (or better the subvariant) 64 bit wide?\nIs the register (or better the subvariant) 8 bit wide?\nx64 instruction set architecture specific stuff like rex …\nCreates an new x64 assembly parser\nThe output instruction\nParses the string to an register (Returns none if it’s …\nparses the tokens (output will be saved in <code>self.out</code>)\nThe sub 16 bit wide variant of the register\nThe sub 32 bit wide variant of the register\nThe sub 64 bit wide variant of the register\nThe sub8 bit wide variant of the register\ngets the subvariant based on the type\nA temporary structure which implements the Lexer trait\nThe parser for parsing x64 assembly instructions\nA x64 register\nA link destination to a block\nfor debugging pourpusis\nFor debugging\nstop optimization\nA number operand\nAn error which can occure during encoding instructions\nThe given instruction has an invalid variant\nhere’s a link placed\nA link destination\nA memory displacement\nA memory displacement\nThe instructions mnemonic\nThe operand type and value to use\nA register operand\nstart optimization again\nThe target instruction\nThe base register\nemits the instruction as one colored string\nDoes the same as the encode function just for naming …\nThe displacement\nreturns if the instruction is empty like mov rsi, rsi\nEncodes the instruction (some will say compiles)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index register\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the current instruction is the other …\nThe mnemonic to use\nFirst operand\nSecond operand\nReturns the used rex prefix for the memory displacment\nrip relativ\nThe scale\nReturns the instruction as assembly representation\nreturns true if it overrides the given operand\nVerifys the instruction (like checking the right opcodes …\nCreates the instruction with 0 operands\nCreates the instruction with 1 operand\nCreates the instruction with 2 operands\nThe debugging location\nThe debug register is used to store files and their file id\nA variable to debug\nadds a debugging location\nThe addres of the location relativ from the start of the …\nthe coloumn which the debug location is refering to\nIf the location is the end of the prolog\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe line which the debug location is refering to\nCreates a new debug variable\nCreates a new debug registry\nIf the location is the start of the epilog")